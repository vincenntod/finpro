// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	transaction "golang/module/transaction/entities"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseInterface is an autogenerated mock type for the UseCaseInterface type
type UseCaseInterface struct {
	mock.Mock
}

type UseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCaseInterface) EXPECT() *UseCaseInterface_Expecter {
	return &UseCaseInterface_Expecter{mock: &_m.Mock}
}


// GetAllTransaction provides a mock function with given fields: page, size
func (_m *UseCaseInterface) GetAllTransaction(page int, size int) ([]transaction.Transaction, error) {
	ret := _m.Called(page, size)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]transaction.Transaction, error)); ok {
		return rf(page, size)
	}
	if rf, ok := ret.Get(0).(func(int, int) []transaction.Transaction); ok {
		r0 = rf(page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransaction'
type UseCaseInterface_GetAllTransaction_Call struct {
	*mock.Call
}

// GetAllTransaction is a helper method to define mock.On call
//   - page int
//   - size int
func (_e *UseCaseInterface_Expecter) GetAllTransaction(page interface{}, size interface{}) *UseCaseInterface_GetAllTransaction_Call {
	return &UseCaseInterface_GetAllTransaction_Call{Call: _e.mock.On("GetAllTransaction", page, size)}
}

func (_c *UseCaseInterface_GetAllTransaction_Call) Run(run func(page int, size int)) *UseCaseInterface_GetAllTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransaction_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransaction_Call) RunAndReturn(run func(int, int) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByDate provides a mock function with given fields: start, end, page, size
func (_m *UseCaseInterface) GetAllTransactionByDate(start string, end string, page int, size int) ([]transaction.Transaction, error) {
	ret := _m.Called(start, end, page, size)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]transaction.Transaction, error)); ok {
		return rf(start, end, page, size)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []transaction.Transaction); ok {
		r0 = rf(start, end, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(start, end, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByDate'
type UseCaseInterface_GetAllTransactionByDate_Call struct {
	*mock.Call
}

// GetAllTransactionByDate is a helper method to define mock.On call
//   - start string
//   - end string
//   - page int
//   - size int
func (_e *UseCaseInterface_Expecter) GetAllTransactionByDate(start interface{}, end interface{}, page interface{}, size interface{}) *UseCaseInterface_GetAllTransactionByDate_Call {
	return &UseCaseInterface_GetAllTransactionByDate_Call{Call: _e.mock.On("GetAllTransactionByDate", start, end, page, size)}
}

func (_c *UseCaseInterface_GetAllTransactionByDate_Call) Run(run func(start string, end string, page int, size int)) *UseCaseInterface_GetAllTransactionByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByDate_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByDate_Call) RunAndReturn(run func(string, string, int, int) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByDateNoLimit provides a mock function with given fields: start, end
func (_m *UseCaseInterface) GetAllTransactionByDateNoLimit(start string, end string) ([]transaction.Transaction, error) {
	ret := _m.Called(start, end)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]transaction.Transaction, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) []transaction.Transaction); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionByDateNoLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByDateNoLimit'
type UseCaseInterface_GetAllTransactionByDateNoLimit_Call struct {
	*mock.Call
}

// GetAllTransactionByDateNoLimit is a helper method to define mock.On call
//   - start string
//   - end string
func (_e *UseCaseInterface_Expecter) GetAllTransactionByDateNoLimit(start interface{}, end interface{}) *UseCaseInterface_GetAllTransactionByDateNoLimit_Call {
	return &UseCaseInterface_GetAllTransactionByDateNoLimit_Call{Call: _e.mock.On("GetAllTransactionByDateNoLimit", start, end)}
}

func (_c *UseCaseInterface_GetAllTransactionByDateNoLimit_Call) Run(run func(start string, end string)) *UseCaseInterface_GetAllTransactionByDateNoLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByDateNoLimit_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionByDateNoLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByDateNoLimit_Call) RunAndReturn(run func(string, string) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionByDateNoLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatus provides a mock function with given fields: status, page, size
func (_m *UseCaseInterface) GetAllTransactionByStatus(status string, page int, size int) ([]transaction.Transaction, error) {
	ret := _m.Called(status, page, size)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]transaction.Transaction, error)); ok {
		return rf(status, page, size)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []transaction.Transaction); ok {
		r0 = rf(status, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(status, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatus'
type UseCaseInterface_GetAllTransactionByStatus_Call struct {
	*mock.Call
}

// GetAllTransactionByStatus is a helper method to define mock.On call
//   - status string
//   - page int
//   - size int
func (_e *UseCaseInterface_Expecter) GetAllTransactionByStatus(status interface{}, page interface{}, size interface{}) *UseCaseInterface_GetAllTransactionByStatus_Call {
	return &UseCaseInterface_GetAllTransactionByStatus_Call{Call: _e.mock.On("GetAllTransactionByStatus", status, page, size)}
}

func (_c *UseCaseInterface_GetAllTransactionByStatus_Call) Run(run func(status string, page int, size int)) *UseCaseInterface_GetAllTransactionByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatus_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatus_Call) RunAndReturn(run func(string, int, int) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatusDate provides a mock function with given fields: status, start, end, page, size
func (_m *UseCaseInterface) GetAllTransactionByStatusDate(status string, start string, end string, page int, size int) ([]transaction.Transaction, error) {
	ret := _m.Called(status, start, end, page, size)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) ([]transaction.Transaction, error)); ok {
		return rf(status, start, end, page, size)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []transaction.Transaction); ok {
		r0 = rf(status, start, end, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(status, start, end, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionByStatusDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatusDate'
type UseCaseInterface_GetAllTransactionByStatusDate_Call struct {
	*mock.Call
}

// GetAllTransactionByStatusDate is a helper method to define mock.On call
//   - status string
//   - start string
//   - end string
//   - page int
//   - size int
func (_e *UseCaseInterface_Expecter) GetAllTransactionByStatusDate(status interface{}, start interface{}, end interface{}, page interface{}, size interface{}) *UseCaseInterface_GetAllTransactionByStatusDate_Call {
	return &UseCaseInterface_GetAllTransactionByStatusDate_Call{Call: _e.mock.On("GetAllTransactionByStatusDate", status, start, end, page, size)}
}

func (_c *UseCaseInterface_GetAllTransactionByStatusDate_Call) Run(run func(status string, start string, end string, page int, size int)) *UseCaseInterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatusDate_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatusDate_Call) RunAndReturn(run func(string, string, string, int, int) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatusDateNoLimit provides a mock function with given fields: status, start, end
func (_m *UseCaseInterface) GetAllTransactionByStatusDateNoLimit(status string, start string, end string) ([]transaction.Transaction, error) {
	ret := _m.Called(status, start, end)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]transaction.Transaction, error)); ok {
		return rf(status, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []transaction.Transaction); ok {
		r0 = rf(status, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(status, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatusDateNoLimit'
type UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call struct {
	*mock.Call
}

// GetAllTransactionByStatusDateNoLimit is a helper method to define mock.On call
//   - status string
//   - start string
//   - end string
func (_e *UseCaseInterface_Expecter) GetAllTransactionByStatusDateNoLimit(status interface{}, start interface{}, end interface{}) *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call {
	return &UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call{Call: _e.mock.On("GetAllTransactionByStatusDateNoLimit", status, start, end)}
}

func (_c *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call) Run(run func(status string, start string, end string)) *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call) RunAndReturn(run func(string, string, string) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionByStatusDateNoLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatusNoLimit provides a mock function with given fields: status
func (_m *UseCaseInterface) GetAllTransactionByStatusNoLimit(status string) ([]transaction.Transaction, error) {
	ret := _m.Called(status)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]transaction.Transaction, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) []transaction.Transaction); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionByStatusNoLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatusNoLimit'
type UseCaseInterface_GetAllTransactionByStatusNoLimit_Call struct {
	*mock.Call
}

// GetAllTransactionByStatusNoLimit is a helper method to define mock.On call
//   - status string
func (_e *UseCaseInterface_Expecter) GetAllTransactionByStatusNoLimit(status interface{}) *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call {
	return &UseCaseInterface_GetAllTransactionByStatusNoLimit_Call{Call: _e.mock.On("GetAllTransactionByStatusNoLimit", status)}
}

func (_c *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call) Run(run func(status string)) *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call) RunAndReturn(run func(string) ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionByStatusNoLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionNoLimit provides a mock function with given fields:
func (_m *UseCaseInterface) GetAllTransactionNoLimit() ([]transaction.Transaction, error) {
	ret := _m.Called()

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transaction.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transaction.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetAllTransactionNoLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionNoLimit'
type UseCaseInterface_GetAllTransactionNoLimit_Call struct {
	*mock.Call
}

// GetAllTransactionNoLimit is a helper method to define mock.On call
func (_e *UseCaseInterface_Expecter) GetAllTransactionNoLimit() *UseCaseInterface_GetAllTransactionNoLimit_Call {
	return &UseCaseInterface_GetAllTransactionNoLimit_Call{Call: _e.mock.On("GetAllTransactionNoLimit")}
}

func (_c *UseCaseInterface_GetAllTransactionNoLimit_Call) Run(run func()) *UseCaseInterface_GetAllTransactionNoLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionNoLimit_Call) Return(_a0 []transaction.Transaction, _a1 error) *UseCaseInterface_GetAllTransactionNoLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetAllTransactionNoLimit_Call) RunAndReturn(run func() ([]transaction.Transaction, error)) *UseCaseInterface_GetAllTransactionNoLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCaseInterface creates a new instance of UseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCaseInterface {
	mock := &UseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
