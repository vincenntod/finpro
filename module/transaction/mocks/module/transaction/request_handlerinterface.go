// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// RequestHandlerinterface is an autogenerated mock type for the RequestHandlerinterface type
type RequestHandlerinterface struct {
	mock.Mock
}

type RequestHandlerinterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestHandlerinterface) EXPECT() *RequestHandlerinterface_Expecter {
	return &RequestHandlerinterface_Expecter{mock: &_m.Mock}
}

// GetAllLimit provides a mock function with given fields: c
func (_m *RequestHandlerinterface) GetAllLimit(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerinterface_GetAllLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLimit'
type RequestHandlerinterface_GetAllLimit_Call struct {
	*mock.Call
}

// GetAllLimit is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerinterface_Expecter) GetAllLimit(c interface{}) *RequestHandlerinterface_GetAllLimit_Call {
	return &RequestHandlerinterface_GetAllLimit_Call{Call: _e.mock.On("GetAllLimit", c)}
}

func (_c *RequestHandlerinterface_GetAllLimit_Call) Run(run func(c *gin.Context)) *RequestHandlerinterface_GetAllLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerinterface_GetAllLimit_Call) Return() *RequestHandlerinterface_GetAllLimit_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerinterface_GetAllLimit_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerinterface_GetAllLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransaction provides a mock function with given fields: c
func (_m *RequestHandlerinterface) GetAllTransaction(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerinterface_GetAllTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransaction'
type RequestHandlerinterface_GetAllTransaction_Call struct {
	*mock.Call
}

// GetAllTransaction is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerinterface_Expecter) GetAllTransaction(c interface{}) *RequestHandlerinterface_GetAllTransaction_Call {
	return &RequestHandlerinterface_GetAllTransaction_Call{Call: _e.mock.On("GetAllTransaction", c)}
}

func (_c *RequestHandlerinterface_GetAllTransaction_Call) Run(run func(c *gin.Context)) *RequestHandlerinterface_GetAllTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransaction_Call) Return() *RequestHandlerinterface_GetAllTransaction_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransaction_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerinterface_GetAllTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByDate provides a mock function with given fields: c
func (_m *RequestHandlerinterface) GetAllTransactionByDate(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerinterface_GetAllTransactionByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByDate'
type RequestHandlerinterface_GetAllTransactionByDate_Call struct {
	*mock.Call
}

// GetAllTransactionByDate is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerinterface_Expecter) GetAllTransactionByDate(c interface{}) *RequestHandlerinterface_GetAllTransactionByDate_Call {
	return &RequestHandlerinterface_GetAllTransactionByDate_Call{Call: _e.mock.On("GetAllTransactionByDate", c)}
}

func (_c *RequestHandlerinterface_GetAllTransactionByDate_Call) Run(run func(c *gin.Context)) *RequestHandlerinterface_GetAllTransactionByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransactionByDate_Call) Return() *RequestHandlerinterface_GetAllTransactionByDate_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransactionByDate_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerinterface_GetAllTransactionByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatus provides a mock function with given fields: c
func (_m *RequestHandlerinterface) GetAllTransactionByStatus(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerinterface_GetAllTransactionByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatus'
type RequestHandlerinterface_GetAllTransactionByStatus_Call struct {
	*mock.Call
}

// GetAllTransactionByStatus is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerinterface_Expecter) GetAllTransactionByStatus(c interface{}) *RequestHandlerinterface_GetAllTransactionByStatus_Call {
	return &RequestHandlerinterface_GetAllTransactionByStatus_Call{Call: _e.mock.On("GetAllTransactionByStatus", c)}
}

func (_c *RequestHandlerinterface_GetAllTransactionByStatus_Call) Run(run func(c *gin.Context)) *RequestHandlerinterface_GetAllTransactionByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransactionByStatus_Call) Return() *RequestHandlerinterface_GetAllTransactionByStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransactionByStatus_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerinterface_GetAllTransactionByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatusDate provides a mock function with given fields: c
func (_m *RequestHandlerinterface) GetAllTransactionByStatusDate(c *gin.Context) {
	_m.Called(c)
}

// RequestHandlerinterface_GetAllTransactionByStatusDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatusDate'
type RequestHandlerinterface_GetAllTransactionByStatusDate_Call struct {
	*mock.Call
}

// GetAllTransactionByStatusDate is a helper method to define mock.On call
//   - c *gin.Context
func (_e *RequestHandlerinterface_Expecter) GetAllTransactionByStatusDate(c interface{}) *RequestHandlerinterface_GetAllTransactionByStatusDate_Call {
	return &RequestHandlerinterface_GetAllTransactionByStatusDate_Call{Call: _e.mock.On("GetAllTransactionByStatusDate", c)}
}

func (_c *RequestHandlerinterface_GetAllTransactionByStatusDate_Call) Run(run func(c *gin.Context)) *RequestHandlerinterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransactionByStatusDate_Call) Return() *RequestHandlerinterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Return()
	return _c
}

func (_c *RequestHandlerinterface_GetAllTransactionByStatusDate_Call) RunAndReturn(run func(*gin.Context)) *RequestHandlerinterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestHandlerinterface creates a new instance of RequestHandlerinterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestHandlerinterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestHandlerinterface {
	mock := &RequestHandlerinterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
