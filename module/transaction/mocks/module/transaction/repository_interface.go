// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	transaction "golang/module/transaction"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

type RepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryInterface) EXPECT() *RepositoryInterface_Expecter {
	return &RepositoryInterface_Expecter{mock: &_m.Mock}
}

// GetAllLimit provides a mock function with given fields: input
func (_m *RepositoryInterface) GetAllLimit(input transaction.FilterLimit) ([]transaction.Transaction, error, int64) {
	ret := _m.Called(input)

	var r0 []transaction.Transaction
	var r1 error
	var r2 int64
	if rf, ok := ret.Get(0).(func(transaction.FilterLimit) ([]transaction.Transaction, error, int64)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(transaction.FilterLimit) []transaction.Transaction); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.FilterLimit) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(transaction.FilterLimit) int64); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Get(2).(int64)
	}

	return r0, r1, r2
}

// RepositoryInterface_GetAllLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLimit'
type RepositoryInterface_GetAllLimit_Call struct {
	*mock.Call
}

// GetAllLimit is a helper method to define mock.On call
//   - input transaction.FilterLimit
func (_e *RepositoryInterface_Expecter) GetAllLimit(input interface{}) *RepositoryInterface_GetAllLimit_Call {
	return &RepositoryInterface_GetAllLimit_Call{Call: _e.mock.On("GetAllLimit", input)}
}

func (_c *RepositoryInterface_GetAllLimit_Call) Run(run func(input transaction.FilterLimit)) *RepositoryInterface_GetAllLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.FilterLimit))
	})
	return _c
}

func (_c *RepositoryInterface_GetAllLimit_Call) Return(_a0 []transaction.Transaction, _a1 error, _a2 int64) *RepositoryInterface_GetAllLimit_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RepositoryInterface_GetAllLimit_Call) RunAndReturn(run func(transaction.FilterLimit) ([]transaction.Transaction, error, int64)) *RepositoryInterface_GetAllLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransaction provides a mock function with given fields:
func (_m *RepositoryInterface) GetAllTransaction() ([]transaction.Transaction, error) {
	ret := _m.Called()

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transaction.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transaction.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetAllTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransaction'
type RepositoryInterface_GetAllTransaction_Call struct {
	*mock.Call
}

// GetAllTransaction is a helper method to define mock.On call
func (_e *RepositoryInterface_Expecter) GetAllTransaction() *RepositoryInterface_GetAllTransaction_Call {
	return &RepositoryInterface_GetAllTransaction_Call{Call: _e.mock.On("GetAllTransaction")}
}

func (_c *RepositoryInterface_GetAllTransaction_Call) Run(run func()) *RepositoryInterface_GetAllTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoryInterface_GetAllTransaction_Call) Return(_a0 []transaction.Transaction, _a1 error) *RepositoryInterface_GetAllTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetAllTransaction_Call) RunAndReturn(run func() ([]transaction.Transaction, error)) *RepositoryInterface_GetAllTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByDate provides a mock function with given fields: start, end
func (_m *RepositoryInterface) GetAllTransactionByDate(start string, end string) ([]transaction.Transaction, error) {
	ret := _m.Called(start, end)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]transaction.Transaction, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) []transaction.Transaction); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetAllTransactionByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByDate'
type RepositoryInterface_GetAllTransactionByDate_Call struct {
	*mock.Call
}

// GetAllTransactionByDate is a helper method to define mock.On call
//   - start string
//   - end string
func (_e *RepositoryInterface_Expecter) GetAllTransactionByDate(start interface{}, end interface{}) *RepositoryInterface_GetAllTransactionByDate_Call {
	return &RepositoryInterface_GetAllTransactionByDate_Call{Call: _e.mock.On("GetAllTransactionByDate", start, end)}
}

func (_c *RepositoryInterface_GetAllTransactionByDate_Call) Run(run func(start string, end string)) *RepositoryInterface_GetAllTransactionByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RepositoryInterface_GetAllTransactionByDate_Call) Return(_a0 []transaction.Transaction, _a1 error) *RepositoryInterface_GetAllTransactionByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetAllTransactionByDate_Call) RunAndReturn(run func(string, string) ([]transaction.Transaction, error)) *RepositoryInterface_GetAllTransactionByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatus provides a mock function with given fields: status
func (_m *RepositoryInterface) GetAllTransactionByStatus(status string) ([]transaction.Transaction, error) {
	ret := _m.Called(status)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]transaction.Transaction, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) []transaction.Transaction); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetAllTransactionByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatus'
type RepositoryInterface_GetAllTransactionByStatus_Call struct {
	*mock.Call
}

// GetAllTransactionByStatus is a helper method to define mock.On call
//   - status string
func (_e *RepositoryInterface_Expecter) GetAllTransactionByStatus(status interface{}) *RepositoryInterface_GetAllTransactionByStatus_Call {
	return &RepositoryInterface_GetAllTransactionByStatus_Call{Call: _e.mock.On("GetAllTransactionByStatus", status)}
}

func (_c *RepositoryInterface_GetAllTransactionByStatus_Call) Run(run func(status string)) *RepositoryInterface_GetAllTransactionByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RepositoryInterface_GetAllTransactionByStatus_Call) Return(_a0 []transaction.Transaction, _a1 error) *RepositoryInterface_GetAllTransactionByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetAllTransactionByStatus_Call) RunAndReturn(run func(string) ([]transaction.Transaction, error)) *RepositoryInterface_GetAllTransactionByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByStatusDate provides a mock function with given fields: status, start, end
func (_m *RepositoryInterface) GetAllTransactionByStatusDate(status string, start string, end string) ([]transaction.Transaction, error) {
	ret := _m.Called(status, start, end)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]transaction.Transaction, error)); ok {
		return rf(status, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []transaction.Transaction); ok {
		r0 = rf(status, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(status, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryInterface_GetAllTransactionByStatusDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByStatusDate'
type RepositoryInterface_GetAllTransactionByStatusDate_Call struct {
	*mock.Call
}

// GetAllTransactionByStatusDate is a helper method to define mock.On call
//   - status string
//   - start string
//   - end string
func (_e *RepositoryInterface_Expecter) GetAllTransactionByStatusDate(status interface{}, start interface{}, end interface{}) *RepositoryInterface_GetAllTransactionByStatusDate_Call {
	return &RepositoryInterface_GetAllTransactionByStatusDate_Call{Call: _e.mock.On("GetAllTransactionByStatusDate", status, start, end)}
}

func (_c *RepositoryInterface_GetAllTransactionByStatusDate_Call) Run(run func(status string, start string, end string)) *RepositoryInterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RepositoryInterface_GetAllTransactionByStatusDate_Call) Return(_a0 []transaction.Transaction, _a1 error) *RepositoryInterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryInterface_GetAllTransactionByStatusDate_Call) RunAndReturn(run func(string, string, string) ([]transaction.Transaction, error)) *RepositoryInterface_GetAllTransactionByStatusDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
