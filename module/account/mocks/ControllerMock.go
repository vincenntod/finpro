// Code generated by MockGen. DO NOT EDIT.
// Source: Controller.go

// Package mock_account is a generated GoMock package.
package mocks

import (
        account "golang/module/account/dto"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockControllerInterface is a mock of ControllerInterface interface.
type MockControllerInterface struct {
        ctrl     *gomock.Controller
        recorder *MockControllerInterfaceMockRecorder
}

// MockControllerInterfaceMockRecorder is the mock recorder for MockControllerInterface.
type MockControllerInterfaceMockRecorder struct {
        mock *MockControllerInterface
}

// NewMockControllerInterface creates a new mock instance.
func NewMockControllerInterface(ctrl *gomock.Controller) *MockControllerInterface {
        mock := &MockControllerInterface{ctrl: ctrl}
        mock.recorder = &MockControllerInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerInterface) EXPECT() *MockControllerInterfaceMockRecorder {
        return m.recorder
}

// CompareVerificationCode mocks base method.
func (m *MockControllerInterface) CompareVerificationCode(verificationCode *account.VerificationCodeRequest) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CompareVerificationCode", verificationCode)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CompareVerificationCode indicates an expected call of CompareVerificationCode.
func (mr *MockControllerInterfaceMockRecorder) CompareVerificationCode(verificationCode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareVerificationCode", reflect.TypeOf((*MockControllerInterface)(nil).CompareVerificationCode), verificationCode)
}

// CreateAccount mocks base method.
func (m *MockControllerInterface) CreateAccount(req *account.CreateRequest) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateAccount", req)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockControllerInterfaceMockRecorder) CreateAccount(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockControllerInterface)(nil).CreateAccount), req)
}

// DeleteDataUser mocks base method.
func (m *MockControllerInterface) DeleteDataUser(id string) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteDataUser", id)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// DeleteDataUser indicates an expected call of DeleteDataUser.
func (mr *MockControllerInterfaceMockRecorder) DeleteDataUser(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataUser", reflect.TypeOf((*MockControllerInterface)(nil).DeleteDataUser), id)
}

// EditDataUser mocks base method.
func (m *MockControllerInterface) EditDataUser(id string, req *account.EditDataUserRequest) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "EditDataUser", id, req)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// EditDataUser indicates an expected call of EditDataUser.
func (mr *MockControllerInterfaceMockRecorder) EditDataUser(id, req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDataUser", reflect.TypeOf((*MockControllerInterface)(nil).EditDataUser), id, req)
}

// EditPassword mocks base method.
func (m *MockControllerInterface) EditPassword(id, code string, req *account.EditDataUserRequest) (*account.MessageResponse, error) {   
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "EditPassword", id, code, req)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// EditPassword indicates an expected call of EditPassword.
func (mr *MockControllerInterfaceMockRecorder) EditPassword(id, code, req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPassword", reflect.TypeOf((*MockControllerInterface)(nil).EditPassword), id, code, req)
}

// GetDataUser mocks base method.
func (m *MockControllerInterface) GetDataUser() (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetDataUser")
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetDataUser indicates an expected call of GetDataUser.
func (mr *MockControllerInterfaceMockRecorder) GetDataUser() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataUser", reflect.TypeOf((*MockControllerInterface)(nil).GetDataUser))
}

// GetDataUserById mocks base method.
func (m *MockControllerInterface) GetDataUserById(id string) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetDataUserById", id)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetDataUserById indicates an expected call of GetDataUserById.
func (mr *MockControllerInterfaceMockRecorder) GetDataUserById(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataUserById", reflect.TypeOf((*MockControllerInterface)(nil).GetDataUserById), id)
}

// Login mocks base method.
func (m *MockControllerInterface) Login(req *account.LoginResponseRequest) (string, *account.LoginResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Login", req)
        ret0, _ := ret[0].(string)
        ret1, _ := ret[1].(*account.LoginResponse)
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockControllerInterfaceMockRecorder) Login(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockControllerInterface)(nil).Login), req)     
}

// SendEmail mocks base method.
func (m *MockControllerInterface) SendEmail(email string) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SendEmail", email)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockControllerInterfaceMockRecorder) SendEmail(email interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockControllerInterface)(nil).SendEmail), email)
}

// SendEmailRegister mocks base method.
func (m *MockControllerInterface) SendEmailRegister(email string) (*account.MessageResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SendEmailRegister", email)
        ret0, _ := ret[0].(*account.MessageResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// SendEmailRegister indicates an expected call of SendEmailRegister.
func (mr *MockControllerInterfaceMockRecorder) SendEmailRegister(email interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailRegister", reflect.TypeOf((*MockControllerInterface)(nil).SendEmailRegister), email)
}