// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	exportcsv "golang/module/exportcsv"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetAllTransaction provides a mock function with given fields:
func (_m *Repository) GetAllTransaction() ([]exportcsv.Transaction, error) {
	ret := _m.Called()

	var r0 []exportcsv.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]exportcsv.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []exportcsv.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exportcsv.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAllTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransaction'
type Repository_GetAllTransaction_Call struct {
	*mock.Call
}

// GetAllTransaction is a helper method to define mock.On call
func (_e *Repository_Expecter) GetAllTransaction() *Repository_GetAllTransaction_Call {
	return &Repository_GetAllTransaction_Call{Call: _e.mock.On("GetAllTransaction")}
}

func (_c *Repository_GetAllTransaction_Call) Run(run func()) *Repository_GetAllTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetAllTransaction_Call) Return(_a0 []exportcsv.Transaction, _a1 error) *Repository_GetAllTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAllTransaction_Call) RunAndReturn(run func() ([]exportcsv.Transaction, error)) *Repository_GetAllTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactionByRangeDateFilter provides a mock function with given fields: req
func (_m *Repository) GetAllTransactionByRangeDateFilter(req *exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error) {
	ret := _m.Called(req)

	var r0 []exportcsv.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) []exportcsv.Transaction); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exportcsv.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*exportcsv.ExportCSVRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAllTransactionByRangeDateFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactionByRangeDateFilter'
type Repository_GetAllTransactionByRangeDateFilter_Call struct {
	*mock.Call
}

// GetAllTransactionByRangeDateFilter is a helper method to define mock.On call
//   - req *exportcsv.ExportCSVRequest
func (_e *Repository_Expecter) GetAllTransactionByRangeDateFilter(req interface{}) *Repository_GetAllTransactionByRangeDateFilter_Call {
	return &Repository_GetAllTransactionByRangeDateFilter_Call{Call: _e.mock.On("GetAllTransactionByRangeDateFilter", req)}
}

func (_c *Repository_GetAllTransactionByRangeDateFilter_Call) Run(run func(req *exportcsv.ExportCSVRequest)) *Repository_GetAllTransactionByRangeDateFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exportcsv.ExportCSVRequest))
	})
	return _c
}

func (_c *Repository_GetAllTransactionByRangeDateFilter_Call) Return(_a0 []exportcsv.Transaction, _a1 error) *Repository_GetAllTransactionByRangeDateFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAllTransactionByRangeDateFilter_Call) RunAndReturn(run func(*exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error)) *Repository_GetAllTransactionByRangeDateFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByStatusAndRangeDateFilter provides a mock function with given fields: req
func (_m *Repository) GetTransactionByStatusAndRangeDateFilter(req *exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error) {
	ret := _m.Called(req)

	var r0 []exportcsv.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) []exportcsv.Transaction); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exportcsv.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*exportcsv.ExportCSVRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetTransactionByStatusAndRangeDateFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByStatusAndRangeDateFilter'
type Repository_GetTransactionByStatusAndRangeDateFilter_Call struct {
	*mock.Call
}

// GetTransactionByStatusAndRangeDateFilter is a helper method to define mock.On call
//   - req *exportcsv.ExportCSVRequest
func (_e *Repository_Expecter) GetTransactionByStatusAndRangeDateFilter(req interface{}) *Repository_GetTransactionByStatusAndRangeDateFilter_Call {
	return &Repository_GetTransactionByStatusAndRangeDateFilter_Call{Call: _e.mock.On("GetTransactionByStatusAndRangeDateFilter", req)}
}

func (_c *Repository_GetTransactionByStatusAndRangeDateFilter_Call) Run(run func(req *exportcsv.ExportCSVRequest)) *Repository_GetTransactionByStatusAndRangeDateFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exportcsv.ExportCSVRequest))
	})
	return _c
}

func (_c *Repository_GetTransactionByStatusAndRangeDateFilter_Call) Return(_a0 []exportcsv.Transaction, _a1 error) *Repository_GetTransactionByStatusAndRangeDateFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetTransactionByStatusAndRangeDateFilter_Call) RunAndReturn(run func(*exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error)) *Repository_GetTransactionByStatusAndRangeDateFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByStatusFilter provides a mock function with given fields: req
func (_m *Repository) GetTransactionByStatusFilter(req *exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error) {
	ret := _m.Called(req)

	var r0 []exportcsv.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) []exportcsv.Transaction); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exportcsv.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*exportcsv.ExportCSVRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetTransactionByStatusFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByStatusFilter'
type Repository_GetTransactionByStatusFilter_Call struct {
	*mock.Call
}

// GetTransactionByStatusFilter is a helper method to define mock.On call
//   - req *exportcsv.ExportCSVRequest
func (_e *Repository_Expecter) GetTransactionByStatusFilter(req interface{}) *Repository_GetTransactionByStatusFilter_Call {
	return &Repository_GetTransactionByStatusFilter_Call{Call: _e.mock.On("GetTransactionByStatusFilter", req)}
}

func (_c *Repository_GetTransactionByStatusFilter_Call) Run(run func(req *exportcsv.ExportCSVRequest)) *Repository_GetTransactionByStatusFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exportcsv.ExportCSVRequest))
	})
	return _c
}

func (_c *Repository_GetTransactionByStatusFilter_Call) Return(_a0 []exportcsv.Transaction, _a1 error) *Repository_GetTransactionByStatusFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetTransactionByStatusFilter_Call) RunAndReturn(run func(*exportcsv.ExportCSVRequest) ([]exportcsv.Transaction, error)) *Repository_GetTransactionByStatusFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
