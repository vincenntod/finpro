// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	exportcsv "golang/module/exportcsv"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

type Usecase_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecase) EXPECT() *Usecase_Expecter {
	return &Usecase_Expecter{mock: &_m.Mock}
}

// ExportCSV provides a mock function with given fields: req
func (_m *Usecase) ExportCSV(req *exportcsv.ExportCSVRequest) ([][]string, error) {
	ret := _m.Called(req)

	var r0 [][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) ([][]string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*exportcsv.ExportCSVRequest) [][]string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*exportcsv.ExportCSVRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_ExportCSV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportCSV'
type Usecase_ExportCSV_Call struct {
	*mock.Call
}

// ExportCSV is a helper method to define mock.On call
//   - req *exportcsv.ExportCSVRequest
func (_e *Usecase_Expecter) ExportCSV(req interface{}) *Usecase_ExportCSV_Call {
	return &Usecase_ExportCSV_Call{Call: _e.mock.On("ExportCSV", req)}
}

func (_c *Usecase_ExportCSV_Call) Run(run func(req *exportcsv.ExportCSVRequest)) *Usecase_ExportCSV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*exportcsv.ExportCSVRequest))
	})
	return _c
}

func (_c *Usecase_ExportCSV_Call) Return(_a0 [][]string, _a1 error) *Usecase_ExportCSV_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_ExportCSV_Call) RunAndReturn(run func(*exportcsv.ExportCSVRequest) ([][]string, error)) *Usecase_ExportCSV_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields:
func (_m *Usecase) Get() ([]exportcsv.Transaction, error) {
	ret := _m.Called()

	var r0 []exportcsv.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]exportcsv.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []exportcsv.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exportcsv.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Usecase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *Usecase_Expecter) Get() *Usecase_Get_Call {
	return &Usecase_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *Usecase_Get_Call) Run(run func()) *Usecase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Usecase_Get_Call) Return(_a0 []exportcsv.Transaction, _a1 error) *Usecase_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecase_Get_Call) RunAndReturn(run func() ([]exportcsv.Transaction, error)) *Usecase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
